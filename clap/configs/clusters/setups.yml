setups:
  setup-common:
    groups:
    - name: commands-common

    actions:
    - type: action
      name: update-packages
      group: commands-common
      extra:
        ansible_python_interpreter: /usr/bin/python3

    - type: action
      name: run-command
      group: commands-common
      extra:
        cmd: "git clean -xdf"
        workdir: "{{ project_root }}"
        ansible_python_interpreter: /usr/bin/python3

    - type: action
      name: run-command
      group: commands-common
      extra:
        cmd: "git pull origin master"
        workdir: "{{ project_root }}"
        ansible_python_interpreter: /usr/bin/python3

    - type: action
      name: run-command
      group: commands-common
      extra:
        cmd: "git checkout {{ commit_id }}"
        workdir: "{{ project_root }}"
        ansible_python_interpreter: /usr/bin/python3

  ##
  ## BEGIN EFS setup section.
  ##

  setup-efs:
    groups:
    - name: ec2-efs

    actions:
    # Set EFS up in all nodes
    - type: action
      name: setup
      group: ec2-efs
      extra:
        ansible_python_interpreter: /usr/bin/python3

    - type: action
      name: mount
      group: ec2-efs
      extra:
        efs_mount_ip: "172.31.15.69"
        efs_mount_point: "{{ nfs_mount_point }}"
        ansible_python_interpreter: /usr/bin/python3

  ##
  ## END EFS setup section.
  ##

  ##
  ## BEGIN Job manager setup section.
  ##

  setup-spits-jobmanager:
    groups:
    - name: spits/jobmanager
      extra:
        ansible_python_interpreter: /usr/bin/python3

  setup-binaries-jobmanager:
    groups:
    - name: commands-common

    actions:
    - type: action
      name: run-command
      group: commands-common
      extra:
        cmd: "make clean"
        workdir: "{{ project_root }}/common"
        ansible_python_interpreter: /usr/bin/python3

    - type: action
      name: run-command
      group: commands-common
      extra:
        cmd: "make all -j16"
        workdir: "{{ project_root }}/common/"
        ansible_python_interpreter: /usr/bin/python3

  ##
  ## END Job manager setup section.
  ##

  ##
  ## BEGIN Framework task manager setup section.
  ## PARAMETERS:
  ##    compute_capability: specific for cuda.
  ##    framework: either cuda or opencl.
  ##    project_root: project's root folder.
  ##

  setup-spits-taskmanager:
    groups:
    - name: spits/taskmanager
      extra:
        ansible_python_interpreter: /usr/bin/python3

  setup-binaries-taskmanager:
    groups:
    - name: commands-common

    actions:
    - type: action
      name: run-command
      group: commands-common
      extra:
        cmd: "make clean"
        workdir: "{{ project_root }}/{{ framework }}"
        ansible_python_interpreter: /usr/bin/python3

    - type: action
      name: run-command
      group: commands-common
      extra:
        cmd: "make spits -j16 ARCH={{ compute_capability }}"
        workdir: "{{ project_root }}/{{ framework }}/"
        ansible_python_interpreter: /usr/bin/python3

  ##
  ## END Framework Task manager setup section.
  ##

  ##
  ## BEGIN Spits job setup section.
  ##    project_root: project's root folder.
  ##    spits_args: arguments to be passed when executing spits binary.
  ##    spits_bin: spits binary's name.
  ##

  setup-spits-job-jobmanager:
    actions:
    - type: action
      name: job-create
      group: spits
      extra:
        jobid: "{{ jobid }}"
        spits_binary: "{{ project_root }}/common/bin/{{ spits_bin }}"
        spits_args: "{{ spits_args }}"
        COPY_BINARY: "false"
        ansible_python_interpreter: /usr/bin/python3

  setup-spits-job-taskmanager:
    actions:
    - type: action
      name: job-create
      group: spits
      extra:
        jobid: "{{ jobid }}"
        spits_binary: "{{ project_root }}/{{ framework }}/bin/{{ spits_bin }}"
        spits_args: "{{ spits_args }}"
        COPY_BINARY: "false"
        ansible_python_interpreter: /usr/bin/python3

  ##
  ## END Spits job setup section.
  ##

  ##
  ## BEGIN Spits job start section.
  ##    jobid: spits job's id.
  ##    tmargs: arguments for task manager.
  ##

  setup-spits-start-bin:
    actions:
    - type: action
      name: start
      group: spits
      extra:
        jobid: "{{ jobid }}"
        tmargs: "{{ tmargs }}"
        ansible_python_interpreter: /usr/bin/python3

  setup-spits-add-nodes:
    actions:
    - type: action
      name: add-nodes
      group: spits
      extra:
        jobid: "{{ jobid }}"

  ##
  ## END Spits job start section.
  ##
